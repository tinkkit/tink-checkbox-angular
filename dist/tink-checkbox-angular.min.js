/*! tink-checkbox-angular v1.0.3 */
"use strict";!function(module){try{module=angular.module("tink.checkbox")}catch(e){module=angular.module("tink.checkbox",[])}module.controller("TinkCheckboxController",["$scope","$filter","$compile",function(scope,$filter,$compile){function changeCheckValue(arr,value){arr.forEach(function(element){config.scope.secretIndeterminate["id"+element.id]=!1,config.scope.secretSelected["id"+element.id]=value;var obj=element;obj&&obj.childs&&obj.childs instanceof Array&&obj.childs.length>0&&changeCheckValue(obj.childs,value)})}function countValues(arr){var values={checked:0,indeterminate:0};return arr.forEach(function(element){var safeId="id"+element.id,inder=config.scope.secretIndeterminate[safeId],check=config.scope.secretSelected[safeId];inder?values.indeterminate++:check&&values.checked++}),values.all=values.checked===arr.length,values}function resetValue(id){config.scope.secretSelected[id]=!1,config.scope.secretIndeterminate[id]=!1}function checkState(selected){if(selected&&selected.childs){var counts=countValues(selected.childs),safeID="id"+selected.id;resetValue(safeID),counts.all?config.scope.secretSelected[safeID]=!0:(counts.checked>0||counts.indeterminate>0)&&(config.scope.secretIndeterminate[safeID]=!0)}}function objectToWatch(arr){var found={watch:[],parents:[]};return arr.forEach(function(element){var obj=element,myChild=null;obj&&obj.childs&&obj.childs instanceof Array&&obj.childs.length>0?(found.parents.push(obj),myChild=objectToWatch(obj.childs),found.watch=found.watch.concat(myChild.watch),found.parents=found.parents.concat(myChild.parents)):found.watch.push(obj)}),found}function findTheParent(arr,id){var found=!1;return arr.forEach(function(element){if(found===!1||void 0===found){var isMyChild,obj=element,safeId="id"+obj.id;return safeId===id?(found={go:!0,obj:obj},!0):(obj&&obj.childs&&obj.childs instanceof Array&&obj.childs.length>0&&(isMyChild=findTheParent(obj.childs,id)),void(isMyChild!==!1&&"object"==typeof isMyChild&&isMyChild.go?(found={parent:obj,obj:isMyChild.obj,newd:[]},found.newd.push(obj),isMyChild.go=!1):(isMyChild&&isMyChild.newd&&isMyChild.newd.push(obj),found=isMyChild)))}}),found}function createCheckbox(name,text,checked){checked=checked===!0?"checked":"";var label='<div class="checkbox"><input type="checkbox" ng-class="{indeterminate:secretIndeterminate.id'+name+'}" ng-change="checkboxChange(\'id'+name+'\')" ng-model="secretSelected.id'+name+'" name="id'+name+'" id="id'+name+'" '+checked+'><label for="id'+name+'">'+text+"</label></div>";return label}var self=this;this.groups={};var config={};this.init=function(scope){if(config.scope=scope,config.scope.checkboxSelect={},config.scope.secretIndeterminate={},config.scope.secretSelected={},(null===scope.checked||void 0===scope.checked||!scope.checked instanceof Array)&&(scope.checked=[]),!(void 0===config.scope.ngModel||null===config.scope.ngModel||!config.scope.ngModel instanceof Array)){self.mapArray(config.scope.ngModel,config.scope.secretSelected);var childs=objectToWatch(config.scope.ngModel).watch;childs.forEach(function(element){config.scope.secretSelected["id"+element.id]=element.selected});var parents=objectToWatch(config.scope.ngModel).parents;parents.reverse().forEach(function(element){checkState(element)})}},this.mapArray=function(arr,map){arr.forEach(function(element){var obj=element;map["id"+obj.id]=obj.selected,obj&&obj.childs&&obj.childs instanceof Array&&obj.childs.length>0&&self.mapArray(obj.childs,map)})},scope.$watch("secretIndeterminate",function(newI){for(var id in newI)newI[id]&&($(self.element).find("input[name="+id+"]").attr("checked",!1),config.scope.secretSelected[id]=!1),$(self.element).find("input[name="+id+"]").prop("indeterminate",newI[id])},!0),scope.$watch("secretSelected",function(newI){for(var id in newI){var Did=id.substr(2,id.length),index=scope.checked.indexOf(Did);newI[id]?-1===index&&scope.checked.push(Did):-1!==index&&scope.checked.splice(index,1)}},!0),scope.checkboxChange=function(id){var selected=findTheParent(config.scope.ngModel,id),valueSelected=config.scope.secretSelected[id];config.scope.secretIndeterminate[id]=!1,selected.obj.childs&&changeCheckValue(selected.obj.childs,valueSelected),selected.newd?selected.newd.forEach(function(element){checkState(element)}):checkState(selected.obj)},this.element=null,this.createTemplate=function(arr){var template=self.teken(arr);return this.element=$compile(template)(scope),this.element},this.teken=function(arr,parent){void 0===parent?parent="":parent+=".childs";var aantal=0,str='<ul class="checkbox-intermediate">';return arr.forEach(function(element){var obj=element,subparent=parent+"["+aantal+"]";str+="<li>",str+=createCheckbox(obj.id,obj.name,obj.selected,subparent),obj&&obj.childs&&obj.childs instanceof Array&&obj.childs.length>0&&(str+=self.teken(obj.childs,subparent)),str+="</li>",aantal++}),str+="</ul>"}}])}(),function(module){try{module=angular.module("tink.checkbox")}catch(e){module=angular.module("tink.checkbox",[])}module.directive("tinkCheckboxList",[function(){return{restrict:"A",controller:"TinkCheckboxController",replace:!1,scope:{ngModel:"=",checked:"="},link:function(scope,element,attrs,checkboxCtrl){scope.ngModel instanceof Array?(checkboxCtrl.init(scope,attrs.ngModel),element.replaceWith(checkboxCtrl.createTemplate(scope.ngModel))):console.warn("checkbox directive - an array of object's are needed to show the content, see the docs")}}}])}(),angular.module("tink.checkbox").run(["$templateCache",function($templateCache){$templateCache.put("templates/tinkDatePickerField.html",'<div role=datepicker class="dropdown-menu datepicker" ng-class="\'datepicker-mode-\' + $mode"> <table style="table-layout: fixed; height: 100%; width: 100%"> <thead> <tr class=text-center> <th> <button tabindex=-1 type=button ng-disabled=pane.prev aria-label="vorige maand" class="btn pull-left" ng-click=$selectPane(-1)> <i class="fa fa-chevron-left"></i> </button> </th> <th colspan="{{ rows[0].length - 2 }}"> <button tabindex=0 type=button class="btn btn-block text-strong" ng-click=$toggleMode()> <strong style="text-transform: capitalize" ng-bind=title></strong> </button> </th> <th> <button tabindex=0 type=button ng-disabled=pane.next aria-label="volgende maand" class="btn pull-right" ng-click=$selectPane(+1)> <i class="fa fa-chevron-right"></i> </button> </th> </tr> <tr class=datepicker-days ng-bind-html=labels ng-if=showLabels></tr> </thead> <tbody> <tr ng-repeat="(i, row) in rows" height="{{ 100 / rows.length }}%"> <td class=text-center ng-repeat="(j, el) in row"> <button tabindex=0 type=button class=btn style="width: 100%" ng-class="{\'btn-selected\': el.selected, \'btn-today\': el.isToday && !el.elected, \'btn-grayed\':el.isMuted}" ng-focus=elemFocus($event) ng-click=$select(el.date) ng-disabled=el.disabled> <span role="" ng-class="{\'text-muted\': el.muted}" ng-bind=el.label></span> </button> </td> </tr> </tbody> </table> </div>'),$templateCache.put("templates/tinkDatePickerInput.html",'<div class=datepicker-input-fields tabindex=-1> <input role=date aria-label=datepicker tabindex=-1 tink-format-input data-format=00/00/0000 data-placeholder=dd/mm/jjjj data-date dynamic-name=dynamicName data-max-date=maxDate data-min-date=minDate ng-model="ngModel">\n<span role="datepicker icon" class=datepicker-icon> <i class="fa fa-calendar"></i> </span> </div>')}]);
//# sourceMappingURL=tink-checkbox-angular.min.map